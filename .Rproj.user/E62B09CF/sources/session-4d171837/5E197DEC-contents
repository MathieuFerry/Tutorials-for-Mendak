library(shiny)
library(DT)
library(sortable)
library(tidyverse)
library(ggplot2)
library(quanteda)
library(rainette)
library(wordcloud)
library(dplyr)
library(readxl)
library(writexl)
library(quanteda.textplots)
library(quanteda.textstats)
library(FactoMineR)
library(ggrepel)
library(paletteer)

#For lemmatization... see if we keep it here
library(udpipe)




ui <- fluidPage(
  
  tags$script("
  Shiny.addCustomMessageHandler('datasetUpdated', function(message) {
    Shiny.onInputChange('datasetTrigger', Math.random());
  });
"),
  navbarMenu("Data Management",
             tabPanel("Upload and Download",
                      sidebarLayout(
                        sidebarPanel(
                          fileInput("file1", "Choose File", accept = c(".csv", ".xls", ".xlsx", ".rdata", ".rds")),
                          actionButton("load_sample", "Load Sample Data"),
                          selectInput("export_format", "Export Format:", choices = c("csv", "xls", "xlsx", "rdata", "rds")),
                          downloadButton("downloadData", "Download Data")
                        ),
                        mainPanel(
                          verbatimTextOutput("data_summary"),
                          uiOutput("variable_management")
                        )
                      )
             ),
             tabPanel("View",
                      DTOutput("data_view")
             )
             
  )
)

# Server
server <- function(input, output, session) {
  `%||%` <- function(x, y) if (is.null(x)) y else x
  
  dataset <- reactiveVal(NULL)
  var_info <- reactiveVal(NULL)
  
  # Function to read various file formats
  read_file <- function(file) {
    ext <- tools::file_ext(file$datapath)
    switch(ext,
           csv = read.csv(file$datapath),
           xls = read_excel(file$datapath),
           xlsx = read_excel(file$datapath),
           rdata = get(load(file$datapath)),
           rds = readRDS(file$datapath),
           stop("Unsupported file format")
    )
  }
  
  # Function to detect variable types
  detect_var_types <- function(data) {
    sapply(data, function(x) {
      if (is.numeric(x)) {
        return("numeric")
      } else if (is.character(x) || is.factor(x)) {
        if (mean(nchar(as.character(x))) < 50) {
          return("factor")
        } else {
          return("character")
        }
      } else {
        return("other")
      }
    })
  }
  
  # Load data
  observeEvent(input$file1, {
    req(input$file1)
    tryCatch({
      data <- read_file(input$file1)
      var_types <- detect_var_types(data)
      for (col in names(data)) {
        if (var_types[col] == "factor") {
          data[[col]] <- as.factor(data[[col]])
        } else if (var_types[col] == "character") {
          data[[col]] <- as.character(data[[col]])
        }
      }
      dataset(data)
      var_info(lapply(names(data), function(var) {
        list(
          name = var,
          type = class(data[[var]])[1],
          levels = if(is.factor(data[[var]])) levels(data[[var]]) else NULL
        )
      }))
    }, error = function(e) {
      showNotification(paste("Error reading file:", e$message), type = "error")
    })
  })
  
  observeEvent(input$load_sample, {
    sample_data <- read.csv("https://mathieuferry.github.io/PondicherryWorkshop/material/data/sample.csv")
    var_types <- detect_var_types(sample_data)
    for (col in names(sample_data)) {
      if (var_types[col] == "factor") {
        sample_data[[col]] <- as.factor(sample_data[[col]])
      } else if (var_types[col] == "character") {
        sample_data[[col]] <- as.character(sample_data[[col]])
      }
    }
    dataset(sample_data)
    var_info(lapply(names(sample_data), function(var) {
      list(
        name = var,
        type = class(sample_data[[var]])[1],
        levels = if(is.factor(sample_data[[var]])) levels(sample_data[[var]]) else NULL
      )
    }))
  })
  
  # Data summary
  output$data_summary <- renderText({
    req(dataset())
    data <- dataset()
    paste("Rows:", nrow(data), "\nColumns:", ncol(data))
  })
  
  # Variable management UI ---------------------
  # Function to generate variable management UI
  # Function to generate variable management UI
  generate_var_management_ui <- function() {
    req(var_info())
    lapply(var_info(), function(var) {
      fluidRow(
        column(2, textInput(paste0(var$name, "_name"), "Name", value = var$name)),
        column(2, selectInput(paste0(var$name, "_type"), "Type",
                              choices = c("numeric", "factor", "character"),
                              selected = var$type)),
        column(4, if(var$type == "factor") {
          tagList(
            sortable::sortable_js(paste0(var$name, "_levels")),
            tags$div(id = paste0(var$name, "_levels"),
                     lapply(seq_along(var$levels), function(i) {
                       tags$div(
                         style = "display: flex; align-items: center; margin-bottom: 5px;",
                         tags$span(class = "glyphicon glyphicon-menu-hamburger",
                                   style = "margin-right: 10px; cursor: move;"),
                         textInput(paste0(var$name, "_level_", i),
                                   label = NULL,
                                   value = var$levels[i])
                       )
                     })
            ),
            tags$script(sprintf("
      var sortable_%s = new Sortable(document.getElementById('%s_levels'), {
        onSort: function (evt) {
          var itemElems = evt.from.children;
          var newOrder = Array.prototype.map.call(itemElems, function(itemElem) {
            return itemElem.querySelector('input').value;
          });
          Shiny.setInputValue('%s_level_order', newOrder);
        }
      });
    ", var$name, var$name, var$name)),
            verbatimTextOutput(paste0(var$name, "_debug"))
          )
        } else {
          NULL
        }),
        column(2, checkboxInput(paste0(var$name, "_create_new"), "Create New Column")),
        column(2, actionButton(paste0(var$name, "_apply"), "Apply Changes"))
      )
    })
  }
  
  # Initial render of variable management UI
  output$variable_management <- renderUI({
    generate_var_management_ui()
  })
  
  # Initialize var_info reactiveVal
  var_info <- reactiveVal(list())
  
  # Initialize dataset reactiveVal
  dataset <- reactiveVal(data.frame())
  
  # Function to update var_info
  update_var_info <- function(data) {
    var_info(lapply(names(data), function(v) {
      list(
        name = v,
        type = class(data[[v]])[1],
        levels = if(is.factor(data[[v]])) levels(data[[v]]) else NULL
      )
    }))
  }
  
  # Initialize observers for each variable
  observe({
    data <- dataset()
    lapply(names(data), function(var_name) {
      observeEvent(input[[paste0(var_name, "_apply")]], {
        new_name <- input[[paste0(var_name, "_name")]]
        new_type <- input[[paste0(var_name, "_type")]]
        create_new <- input[[paste0(var_name, "_create_new")]]
        
        current_var <- data[[var_name]]
        
        output[[paste0(var_name, "_debug")]] <- renderPrint({
          cat("Current UI values:\n")
          for(i in seq_along(levels(current_var))) {
            cat(input[[paste0(var_name, "_level_", i)]], "\n")
          }
        })
        
        
        if (new_type == "numeric") {
          if (is.numeric(current_var)) {
            new_var <- current_var
          } else {
            if (all(!is.na(suppressWarnings(as.numeric(as.character(current_var)))))) {
              new_var <- as.numeric(as.character(current_var))
            } else {
              showNotification("Cannot convert to numeric. Some values are non-numeric.", type = "error")
              return()
            }
          }
        } else if (new_type == "factor") {
          if (is.factor(current_var)) {
            old_levels <- levels(current_var)
            
            # Get the new order of levels from the JavaScript-updated input
            new_levels <- input[[paste0(var_name, "_level_order")]] %||% 
              sapply(seq_along(old_levels), function(i) {
                input[[paste0(var_name, "_level_", i)]]
              })
            
            # Remove any NA or empty values
            new_levels <- new_levels[!is.na(new_levels) & new_levels != ""]
            
            print("Debug: UI Inputs (New Levels Order)")
            print(new_levels)
            
            # Create a mapping from old levels to new levels
            level_map <- setNames(new_levels, old_levels)
            
            # Create a new factor with updated levels and reordered values
            new_var <- factor(level_map[as.character(current_var)], levels = new_levels)
            
            print("Debug: Updated Factor Levels")
            print(levels(new_var))
            
            # Verify the order of unique values in the new factor
            print("Debug: Unique values in new factor")
            print(unique(new_var))
          } else {
            unique_values <- unique(current_var)
            if (length(unique_values) <= 10) {
              new_var <- factor(current_var)
            } else {
              showNotification("Cannot convert to factor. More than 10 unique values.", type = "error")
              return()
            }
          }
        } else {
          new_var <- as.character(current_var)
        }
        
        if (create_new && new_name != var_name) {
          data[[new_name]] <- new_var
        } else {
          data[[var_name]] <- new_var
          if (new_name != var_name) {
            names(data)[names(data) == var_name] <- new_name
          }
        }
        
        # Update the dataset
        dataset(data)
        
        # Force a refresh of the data view
        output$data_view <- renderDT({
          datatable(dataset(), options = list(scrollX = TRUE))
        })
        
        # Print the levels of the updated factor in the dataset
        print("Debug: Final Factor Levels in Dataset")
        print(levels(dataset()[[ifelse(create_new && new_name != var_name, new_name, var_name)]]))
        print("Debug: Final Unique Values in Dataset")
        print(unique(dataset()[[ifelse(create_new && new_name != var_name, new_name, var_name)]]))
        
        
        
        # Update var_info
        update_var_info(data)
        
        # Force re-render of variable management UI
        output$variable_management <- renderUI({
          generate_var_management_ui()
        })
        
        # Trigger an event to notify other parts of the app that the data has changed
        session$sendCustomMessage(type = 'datasetUpdated', message = list())
        
        showNotification("Variable updated successfully", type = "message")
      })
    })
  })
  
  # React to changes in dataset structure
  observe({
    data <- dataset()
    update_var_info(data)
    
    # Force re-render of variable management UI
    output$variable_management <- renderUI({
      generate_var_management_ui()
    })
  })
  
  # Data view
  output$data_view <- renderDT({
    req(dataset())
    datatable(dataset(), options = list(scrollX = TRUE))
  })
  
}
shinyApp(ui = ui, server = server)
